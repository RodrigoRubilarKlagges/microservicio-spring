#trigger:
#- main

pool:
  vmImage: ubuntu-latest

steps:
  - task: Gradle@3
    displayName: Construir
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build jacocoTestReport'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false

  - task: CopyFiles@2
    displayName: Copiar datos
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        **/build/libs/*.jar
        **/build/**/*.xml
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: Publicar
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: appJar
      publishLocation: 'Container'

  - task: DownloadBuildArtifacts@0
    displayName: Descargar
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'appJar'
      downloadPath: '$(Pipeline.Workspace)'




  - task: Gradle@3
    displayName: Analizar
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build jacocoTestReport'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      sqGradlePluginVersionChoice: 'specify'
      sonarQubeGradlePluginVersion: '3.3'


  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'rodrigorubilarklagges'
      projectKey: 'RodrigoRubilarKlagges.microservicio-spring'
      projectName: 'microservicio-spring'
    displayName: Preparar Sonarqube


  - task: SonarCloudPublish@1
    displayName: Publicar resultados
    inputs:
      pollingTimeoutSec: '300'



  - task: DockerInstaller@0
    inputs:
      dockerVersion: '17.09.0-ce'

  - task: Docker@2
    displayName: iniciar docker
    inputs:
      containerRegistry: 'Docker'
      command: 'login'

  - task: Docker@2
    displayName: construir imagen
    inputs:
      containerRegistry: 'Docker'
      repository: 'rodrigorubilark/microservicio-spring'
      command: 'build'
      Dockerfile: '**/Dockerfile'
      tags: latest

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker'
      repository: 'rodrigorubilark/microservicio-spring'
      command: 'push'
      tags: 'latest'

  - task: KubectlInstaller@0
    inputs:
      kubectlVersion: 'latest'
    displayName: Instalacion Kubectl
  
  - task: Kubernetes@1
    inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kubernete-conection'
        command: 'login'
    displayName: AKS Login

  - task: Kubernetes@1
    displayName: Kubernetes container deploy
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'kubernete-conection'
      namespace: 'default'
      command: 'apply'
      arguments: '-f kubernetes/testing-vhroman.yaml'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Azure Container Registry'
    
  - task: Kubernetes@1
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'Azure subscription 1(6ae94dbd-c1bd-451a-810e-8c9ed2fa8c96)'
      azureResourceGroup: 'devops'
      kubernetesCluster: 'devops'
      namespace: 'default'
      command: 'expose'
      arguments: 'deployment testing-vhroman --type=LoadBalancer --name=ejercicio-final'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Azure Container Registry'
    continueOnError: true
    displayName: Expose deployment

  - script: |
      sleep 10
      ipApp=$(kubectl get services ejercicio-final --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
      echo $ipApp
      URLApp=http://$ipApp:8080
      echo $URLApp
      echo "##vso[task.setvariable variable=appDeploy;isOutput=true]$URLApp"
    name: getip
    displayName: Get IP
  